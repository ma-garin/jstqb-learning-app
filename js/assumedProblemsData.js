// js/assumedProblemsData.js

export const assumedProblems = [
    // 既存の問題 (以前に提供されたもの) はここにそのまま残します
    {
        id: "TA-1.2.1-1",
        syllabusChapter: "1",
        syllabusSection: "1.2",
        syllabusObjective: "TA-1.2.1 （K2）対応するライフサイクルモデルに応じて、テストアナリストが関与するタイミングとその関わり方がどのように異なるのか、またその理由を説明する。",
        question: "シーケンシャルな開発のプロセスの場合、システムテスト分析および設計はいつ⾏うか。適切なものを次の選択肢から 1 つ選びなさい。",
        choices: [
            "要求仕様から、コンポーネント設計仕様までのプロセスと並⾏して⾏う。",
            "アーキテクチャ設計レビュー終了基準を満たした時から⾏う。",
            "システム環境設計完了後のイテレーションから⾏う。",
            "コーディングおよびコンポーネントテストと並⾏して⾏う。"
        ],
        correctAnswerLetter: "a", // 'a', 'b', 'c', 'd'
        explanation: "シラバス「1.2.1 ソフトウェア開発ライフサイクルにおけるテスト」では次のように記載されていることから a を正解としています。\\nシーケンシャルな V 字モデルの場合で、ISTQB が⽰すテストプロセスをシステムテストレベルに適⽤した場合、システムテスト分析および設計は、要求仕様から、システムおよびアーキテクチャ設計仕様（上位レベル）を経て、コンポーネント設計仕様（下位レベル）までのプロセスと並⾏して⾏います。"
    },
    {
        id: "TA-1.3.1-1",
        syllabusChapter: "1",
        syllabusSection: "1.3",
        syllabusObjective: "TA-1.3.1 （K2）分析の活動を行う際に、テストアナリストにとって適切なタスクをまとめる。",
        question: "テストアナリストの分析活動に関する次の記述のうち、適切なものをすべて選びなさい。\\n（A）テストベースを分析して、テスト可能な項目を識別する。\\n（B）テスト条件を識別し、識別したテスト条件の測定基準を定義する。\\n（C）テストアナリストに関連する環境要件を識別し、指定する。\\n（D）識別したテスト条件を、テストマネージャに報告し、承認を得る。\\n（E）リスク管理活動で定義されたリスク軽減活動を特定し、それらをテスト条件に関連付ける。\\n（F）テストケースのタイプを定義し、それらの優先度を定義する。\\n（G）トレーサビリティを考慮し、テスト条件とテストベースの間の双方向のトレーサビリティを確立する。",
        choices: [
            "A, B, C, E, G",
            "A, C, D, F, G",
            "B, D, E, F",
            "A, B, C, D, E, F, G"
        ],
        correctAnswerLetter: "a",
        explanation: "シラバス 1.3 テスト分析 のテストアナリストのタスクは以下の通り。\\n・テストベースを分析して、テスト可能な項目を識別する。\\n・テスト条件を識別し、識別したテスト条件の測定基準を定義する。\\n・テストアナリストに関連する環境要件を識別し、指定する。\\n・リスク管理活動で定義されたリスク軽減活動を特定し、それらをテスト条件に関連付ける。\\n・識別したテスト条件を、テストマネージャとプロジェクト関係者と連携して、レビューし、承認を得る。\\n・テスト条件を実装するテストケースのタイプを定義し、それらの優先度を定義する。\\n・トレーサビリティを考慮し、テスト条件とテストベースの間の双方向のトレーサビリティを確立する。\\n上記から、D と F が誤り。"
    },
    {
        id: "TA-1.4.2-1",
        syllabusChapter: "1",
        syllabusSection: "1.4.2",
        syllabusObjective: "TA-1.4.2 （K4）特定のプロジェクトシナリオに対して、テストケースの適切な設計レベル（ハイレベルまたはローレベル）を選択する。",
        question: "あなたは新しい顧客管理システム（CRM）のテストアナリストです。このシステムは、非常に複雑なビジネスロジックを持ち、頻繁に要件が変更される可能性があります。特に、顧客データの入力、更新、削除の機能は、多くのバリデーションルールと連動しています。このシナリオにおいて、テストケースの設計レベルとして最も適切なのはどれですか？その理由も簡潔に述べなさい。",
        choices: [
            "a. ローレベルテストケース。なぜなら、すべてのバリデーションルールを網羅的にテストするために、詳細な手順とデータが必要だから。",
            "b. ハイレベルテストケース。なぜなら、要件変更への対応と、テスト設計の柔軟性を保つため、大まかな手順と期待結果のみを記述するから。",
            "c. 最初はローレベルで詳細に設計し、後にハイレベルに抽象化する。なぜなら、初期段階での網羅性を確保し、その後のメンテナンス性を考慮するから。",
            "d. ハイレベルとローレベルの組み合わせ。なぜなら、安定したコア機能にはローレベルを適用し、頻繁に変更される機能にはハイレベルを適用することで、効率性と柔軟性を両立できるから。"
        ],
        correctAnswerLetter: "b",
        explanation: "このシナリオでは、要件の頻繁な変更に対応できる柔軟性が求められます。ローレベルテストケースは詳細な手順とデータを記述するため、要件変更があった際のメンテナンスコストが高くなります。ハイレベルテストケースは、大まかな手順と期待結果を記述し、テスト実行時に具体的なデータや手順を調整できるため、変化に強い特性があります。複雑なビジネスロジックであっても、ハイレベルテストケースはテストアナリストがテストの意図を把握し、実行時に探索的な要素を取り入れる余地を残します。\\nしたがって、変化に強く、柔軟性の高いハイレベルテストケースが最も適切です。特にアジャイルな環境や、要件が固まっていない初期段階では、ハイレベルテストケースが適しています。"
    },
    {
        id: "TA-2.4.1-1",
        syllabusChapter: "2",
        syllabusSection: "2.4.1",
        syllabusObjective: "TA-2.4.1 （K4）リスクを軽減するためにテスト活動の優先度付けに貢献する。", // 修正: K2からK4へ。より実践的な問題にするため。
        question: "あなたはオンラインバンキングシステムのテストアナリストです。リスク分析の結果、以下の3つの機能が特に高いリスクを持つと特定されました。\\n1. ログイン機能（認証失敗時のセキュリティ脆弱性の可能性）\\n2. 口座振替機能（送金ミスや金額の不整合の可能性）\\n3. 明細照会機能（表示データの誤りや表示遅延の可能性）\\nあなたはこれらの機能のテストをどのように優先順位付けし、どのようなテスト活動に注力しますか？それぞれの機能について、優先順位と具体的なテストアプローチを簡潔に説明しなさい。",
        choices: [
            "a. 優先順位：1 > 2 > 3。ログイン機能はセキュリティテスト、口座振替機能はデータ整合性テスト、明細照会機能はUIテスト。",
            "b. 優先順位：2 > 1 > 3。口座振替機能は財務的影響が大きいため最優先し、セキュリティテストとデータ整合性テストを重点的に行う。次にログイン機能のセキュリティテスト、最後に明細照会機能の機能正確性とパフォーマンステスト。",
            "c. 優先順位：3 > 2 > 1。ユーザーが最も頻繁に利用する明細照会機能を優先し、使用性テストを強化する。その後、ログイン、口座振替の順にテストを進める。",
            "d. 優先順位：全て同等。すべての機能が重要であるため、リスクベースドテストの原則を無視し、均等にリソースを配分する。"
        ],
        correctAnswerLetter: "b",
        explanation: "リスクベースドテストでは、発生確率と影響度の積に基づいて優先順位を決定します。\\n1. **口座振替機能 (2)：** 財務的な直接的な損失に繋がる可能性があり、影響度が最も大きいと考えられます。よって最優先とし、セキュリティテスト（不正送金防止）、データ整合性テスト（金額、口座情報の正確性）、境界値テスト（送金上限・下限）、リカバリーテスト（中断時のデータ復旧）などを厳密に行うべきです。\\n2. **ログイン機能 (1)：** セキュリティ脆弱性はシステム全体の信頼性を損ない、ユーザーに大きな損害を与える可能性があります。影響度は非常に高いですが、直接的な財務損失よりはワンクッション置かれます。最優先に次ぐ優先順位とし、脆弱性診断（SQLインジェクション、XSSなど）、パスワードポリシーの検証、認証ロジックの堅牢性テスト、アカウントロックアウト機能のテストなどを強化します。\\n3. **明細照会機能 (3)：** 表示データの誤りや遅延はユーザーエクスペリエンスを損ねますが、直接的な財務損失やセキュリティ侵害と比較すると影響度は低いと考えられます。最後に優先順位を置き、機能正確性テスト（表示データの正確性）、パフォーマンステスト（大量データ表示時の応答速度）、使用性テスト（UIの分かりやすさ）などを行います。\\nしたがって、影響度を考慮した優先順位は 2 > 1 > 3 となります。"
    },
    {
        id: "TA-3.2.1-1",
        syllabusChapter: "3",
        syllabusSection: "3.2.1",
        syllabusObjective: "TA-3.2.1 （K3）同値分割法を特定のシナリオに適用する。",
        question: "オンラインストアの購入機能で、ユーザーは1個から100個までの商品を注文できます。この機能に対して同値分割法を適用する場合、有効同値クラスと無効同値クラスとして適切な入力値の組み合わせを一つ選びなさい。",
        choices: [
            "a. 有効: 50, 無効: 0, 101",
            "b. 有効: 1, 100, 無効: -1, 101",
            "c. 有効: 1, 50, 100, 無効: 0, 101",
            "d. 有効: 25, 75, 無効: 0, 101"
        ],
        correctAnswerLetter: "a",
        explanation: "同値分割法では、有効な入力範囲と無効な入力範囲を特定し、それぞれのクラスから代表値を一つ選ぶことが目的です。\\n- 有効な範囲: 1～100個\\n- 無効な範囲（下限未満）: 0個以下\\n- 無効な範囲（上限超過）: 101個以上\\n\\n選択肢aは、有効な範囲の中間値(50)と、無効な範囲（下限未満の0、上限超過の101）から代表値を選んでおり、同値分割法の原則に最も合致しています。\\n選択肢b、c、dは境界値分析の要素を含んでいたり、代表値の選び方が同値分割法の主目的とは異なる場合があります。"
    },
    {
        id: "TA-3.2.2-1",
        syllabusChapter: "3",
        syllabusSection: "3.2.2",
        syllabusObjective: "TA-3.2.2 （K3）境界値分析を特定のシナリオに適用する。",
        question: "ユーザーの年齢入力フィールドは、18歳から65歳までの整数を受け付けます。境界値分析（2点境界値法）を適用する場合、テストケースとして適切な入力値の組み合わせをすべて選びなさい。",
        choices: [
            "a. 17, 18, 19, 64, 65, 66",
            "b. 18, 65",
            "c. 17, 18, 65, 66",
            "d. 1, 18, 65, 100"
        ],
        correctAnswerLetter: "c",
        explanation: "境界値分析（2点境界値法）では、有効な範囲の境界値とその隣接値（有効な境界値のすぐ外側の無効値）をテストします。\\n有効範囲の境界は 18 と 65 です。\\n- 18 の境界値とその隣接値: 17 (無効), 18 (有効)\\n- 65 の境界値とその隣接値: 65 (有効), 66 (無効)\\nしたがって、適切な組み合わせは 17, 18, 65, 66 です。"
    },
    {
        id: "TA-3.2.3-1",
        syllabusChapter: "3",
        syllabusSection: "3.2.3",
        syllabusObjective: "TA-3.2.3 （K4）デシジョンテーブルテストを特定のシナリオに適用する。",
        question: "ある会員登録フォームには、以下のルールがあります。\\n・ユーザーがメールアドレスを正しく入力し、かつパスワードが要件を満たしている場合、アカウントが作成される。\\n・メールアドレスが正しくない場合、エラーメッセージAが表示される。\\n・パスワードが要件を満たさない場合、エラーメッセージBが表示される。\\n・両方に問題がある場合、エラーメッセージAとエラーメッセージBの両方が表示される。\\nこのルールに基づいてデシジョンテーブルを作成する場合、考えられるルールの数と、各ルールにおける「アカウント作成」の期待結果として適切な組み合わせを選びなさい。",
        choices: [
            "a. 4ルール、アカウント作成は1つのルールで「Yes」",
            "b. 3ルール、アカウント作成は1つのルールで「Yes」",
            "c. 4ルール、アカウント作成は2つのルールで「Yes」",
            "d. 2ルール、アカウント作成は1つのルールで「Yes」"
        ],
        correctAnswerLetter: "a",
        explanation: "このシナリオの条件は以下の2つです。\\n1. メールアドレスが正しいか？ (真/偽)\\n2. パスワードが要件を満たしているか？ (真/偽)\\n2つの条件があるため、考えられるルールの数は $2^2 = 4$ 通りです。\\n\\n各ルールの期待結果は以下のようになります。\\n- ルール1: メールアドレス (真), パスワード (真) -> アカウント作成 (Yes), エラーA (No), エラーB (No)\\n- ルール2: メールアドレス (真), パスワード (偽) -> アカウント作成 (No), エラーA (No), エラーB (Yes)\\n- ルール3: メールアドレス (偽), パスワード (真) -> アカウント作成 (No), エラーA (Yes), エラーB (No)\\n- ルール4: メールアドレス (偽), パスワード (偽) -> アカウント作成 (No), エラーA (Yes), エラーB (Yes)\\n\\nしたがって、4つのルールがあり、そのうち「アカウント作成」が「Yes」となるのはルール1の1つのみです。"
    },
    // ここに他の章からの新しい問題を追加していきます
    // 例: Chapter 4, 5, 6 からも追加する

];

// assumedProblems 配列をエクスポート
// main.js で import { assumedProblems } from './assumedProblemsData.js'; のように使用
export { assumedProblems };