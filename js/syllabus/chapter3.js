// js/syllabus/chapter3.js

const chapter3 = {
    chapter: "3",
    title: "テスト技法 - 630 分",
    sections: [
        {
            section: "3.1",
            title: "イントロダクション",
            objectives: [
                "TA-3.1.1 (K2) 特定のテスト目的に合わせて適切なテスト技法を選択・適用するテストアナリストの役割を説明する。"
            ],
            keyTerms: [],
            content: [
                "テストアナリストは、特定のテスト目的に合わせて適切なテスト技法を選択し、適用する専門知識を持っている。本章では、いくつかのテスト技法について説明し、それぞれどのような状況で適用すべきか、長所と短所、そして効果的に適用するための注意点を示す。"
            ]
        },
        {
            section: "3.2",
            title: "ブラックボックステスト技法",
            objectives: [
                "TA-3.2.1 (K2) ブラックボックステスト技法の定義と目的を説明する。"
            ],
            keyTerms: [],
            content: [
                "ブラックボックステスト技法は、内部構造を考慮せずに、ソフトウェアの外部動作に基づいてテストケースを設計する。"
            ]
        },
        {
            section: "3.2.1",
            title: "同値分割法",
            objectives: [
                "TA-3.2.1 （K3）与えられたテスト状況に対し、同値分割法を適用してテストケースを導出する。"
            ],
            keyTerms: [
                { term: "同値分割法", definition: "入力データや出力データを等価なグループ（同値クラス）に分割し、その中から代表値をテストケースとして選択するテスト技法。" }
            ],
            content: [
                "同値分割法は、入力データのセット（値）または出力データを等価なグループ（同値クラス）に分割し、それぞれの同値クラスから 1 つの値をテスト対象として選択するテスト設計技法である。この技法は、システムの有効な入力と無効な入力の両方に適用できる。",
                "各同値クラスは、ソフトウェアが同じように動作すると予測される一連の入力値または出力値を表す。",
                "例えば、有効な同値クラスと無効な同値クラスに分割する。",
                "有効な同値クラス: 期待される動作を引き起こす入力値の範囲。",
                "無効な同値クラス: エラーメッセージや異常な動作を引き起こすことが期待される入力値の範囲。",
                "この技法は、入力値の組み合わせを減らすことで、テストケース数を削減できる。",
                "同値分割法の長所：",
                "・ テストケース数の削減。",
                "・ テストの網羅性の向上。",
                "・ 欠陥を発見しやすい。",
                "同値分割法の短所：",
                "・ すべての欠陥を発見できるわけではない。",
                "・ 適切な同値クラスを識別するのに経験が必要。",
                "この技法を効果的に適用するための注意点：",
                "・ 全ての入力フィールドに対して適用する。",
                "・ 複数の条件がある場合は、他の技法と組み合わせることを検討する。",
                "・ 入力値だけでなく、出力値にも適用することを検討する。"
            ]
        },
        {
            section: "3.2.2",
            title: "境界値分析",
            objectives: [
                "TA-3.2.2 （K3）与えられたテスト状況に対し、境界値分析を適用してテストケースを導出する。"
            ],
            keyTerms: [
                { term: "境界値分析", definition: "同値クラスの境界値、またはその近傍の値をテストケースとして選択するテスト技法。" }
            ],
            content: [
                "境界値分析は、同値クラスの境界値またはその近傍の値をテスト対象として選択するテスト設計技法である。これは、有効な境界と無効な境界の両方に適用できる。",
                "境界値分析は、同値分割法と組み合わせて使用されることが多く、同値分割法で識別された各同値クラスの境界に焦点を当てる。",
                "例えば、有効な境界値と無効な境界値に分割する。",
                "有効な境界値: 期待される動作を引き起こす入力値の境界。",
                "無効な境界値: エラーメッセージや異常な動作を引き起こすことが期待される入力値の境界。",
                "境界値分析の長所：",
                "・ 欠陥を発見しやすい（境界に欠陥が集中する傾向があるため）。",
                "・ テストの網羅性が高い。",
                "境界値分析の短所：",
                "・ すべての欠陥を発見できるわけではない。",
                "・ 複雑なシステムでは、境界値の識別が難しい場合がある。",
                "この技法を効果的に適用するための注意点：",
                "・ 数値だけでなく、日付、時間、文字列の長さなどにも適用する。",
                "・ 各境界値の直前と直後の値もテストする。",
                "・ 複数の境界がある場合は、すべての組み合わせを考慮する。"
            ]
        },
        {
            section: "3.2.3",
            title: "デシジョンテーブルテスト",
            objectives: [
                "TA-3.2.3 （K3）与えられたテスト状況に対し、デシジョンテーブルテストを適用してテストケースを導出する。"
            ],
            keyTerms: [
                { term: "デシジョンテーブルテスト", definition: "条件と行動の組み合わせに基づいて、システム動作を定義し、テストケースを導出するテスト技法。" }
            ],
            content: [
                "デシジョンテーブルテストは、ビジネスルールやシステムの複雑な論理をテストするために使用されるブラックボックステスト技法である。条件と行動の組み合わせを網羅的にテストすることを目的としている。",
                "デシジョンテーブルは、以下の要素で構成される。",
                "・ 条件スタブ: システムの前提条件または入力。",
                "・ 行動スタブ: 条件が満たされたときにシステムが実行する行動。",
                "・ ルール: 条件と行動の特定の組み合わせ。",
                "デシジョンテーブルテストの長所：",
                "・ 複雑なビジネスロジックを網羅的にテストできる。",
                "・ テストケースの設計を体系的に行うことができる。",
                "・ 要件の曖昧さを特定できる。",
                "デシジョンテーブルテストの短所：",
                "・ 条件と行動が増えると、テーブルが非常に大きくなる。",
                "・ すべての組み合わせをテストすることが非現実的になる場合がある。",
                "この技法を効果的に適用するための注意点：",
                "・ 条件と行動を明確に定義する。",
                "・ 不可能な組み合わせや矛盾する組み合わせを識別する。",
                "・ 完全性と一貫性を確保する。"
            ]
        },
        {
            section: "3.2.4",
            title: "状態遷移テスト",
            objectives: [
                "TA-3.2.4 （K3）与えられたテスト状況に対し、状態遷移テストを適用してテストケースを導出する。"
            ],
            keyTerms: [
                { term: "状態遷移テスト", definition: "システムの現在状態と、その状態間のイベントによる遷移をテストする技法。" } // 定義を少し調整
            ],
            content: [
                "状態遷移テストは、システムの動作がその現在の状態と過去のイベントに依存する場合に特に有用なブラックボックステスト技法である。システムの状態、イベント、遷移、行動を識別し、テストケースを設計する。",
                "状態遷移図は、状態遷移テストの設計を支援するために使用される。",
                "状態遷移テストの長所：",
                "・ 状態に依存する動作のテストに効果的。",
                "・ 無効な遷移や到達不可能な状態を発見しやすい。",
                "・ テストカバレッジが明確になる。",
                "状態遷移テストの短所：",
                "・ 状態の数が増えると、複雑になる。",
                "・ すべてのパスをテストすることが非現実的になる場合がある。",
                "この技法を効果的に適用するための注意点：",
                "・ 全ての有効な状態と遷移を網羅する。",
                "・ 無効な遷移、または予期せぬイベントがトリガーされた場合のシステムの動作をテストする。",
                "・ 初期状態と最終状態を考慮する。"
            ]
        },
        {
            section: "3.2.5",
            title: "クラシフィケーションツリー技法",
            objectives: [
                "TA-3.2.5 （K3）与えられたテスト状況に対し、クラシフィケーションツリー技法を適用してテストケースを導出する。"
            ],
            keyTerms: [
                { term: "クラシフィケーションツリー技法", definition: "システムの特性をツリー構造で分類し、テストケースを導出するテスト技法。" }
            ],
            content: [
                "クラシフィケーションツリー技法は、システムのテスト対象となる要素（機能、データ、環境など）を階層的に分類し、ツリー構造で表現することで、テストケースを体系的に導出するブラックボックステスト技法である。異なる分類からの要素を組み合わせることで、テストケースの組み合わせを効率的に生成できる。",
                "クラシフィケーションツリー技法の長所：",
                "・ テストケースの網羅性を視覚的に表現できる。",
                "・ テストケースの組み合わせを効率的に生成できる。",
                "・ 複雑なテスト対象を構造化して理解できる。",
                "クラシフィケーションツリー技法の短所：",
                "・ ツリーの設計に時間がかかる場合がある。",
                "・ 適切な分類を識別するのに経験が必要。",
                "この技法を効果的に適用するための注意点：",
                "・ 全ての関連する特性を分類に含める。",
                "・ 分類ごとに同値クラスと境界値を考慮する。",
                "・ ツリーの深さや幅が大きくなりすぎないように注意する。"
            ]
        },
        {
            section: "3.2.6",
            title: "ペアワイズテスト",
            objectives: [
                "TA-3.2.6 （K3）与えられたテスト状況に対し、ペアワイズテストを適用してテストケースを導出する。"
            ],
            keyTerms: [
                { term: "ペアワイズテスト", definition: "少なくとも 2 つのパラメータの値のすべての可能な組み合わせをテストする、組み合わせテスト技法。" }
            ],
            content: [
                "ペアワイズテスト（2因子テスト、all-pairsテストとも呼ばれる）は、複数のパラメータとその値があるシステムにおいて、パラメータの組み合わせテストを効率的に行うための技法である。すべてのパラメータのすべての可能な値のペアが少なくとも 1 つのテストケースでカバーされるようにテストケースを設計する。",
                "多くの欠陥は、1 つまたは 2 つのパラメータの相互作用によって引き起こされるという経験則に基づいている。",
                "ペアワイズテストの長所：",
                "・ テストケース数を大幅に削減できる。",
                "・ 比較的少ないテストケースで高い欠陥検出能力を持つ。",
                "・ 多くの欠陥が発見されることが経験的に証明されている。",
                "ペアワイズテストの短所：",
                "・ 3 つ以上のパラメータの相互作用による欠陥を見逃す可能性がある。",
                "・ 特定の組み合わせに焦点を当てたい場合に不向き。",
                "この技法を効果的に適用するための注意点：",
                "・ ツールを使用すると、テストケースの生成が容易になる。",
                "・ パラメータの数が多い場合に特に有効。",
                "・ 重要なパラメータや相互作用の可能性が高いパラメータを優先する。"
            ]
        },
        {
            section: "3.2.7",
            title: "ユースケーステスト",
            objectives: [
                "TA-3.2.7 （K3）与えられたテスト状況に対し、ユースケーステストを適用してテストケースを導出する。"
            ],
            keyTerms: [
                { term: "ユースケーステスト", definition: "システムの機能要件をユースケースに基づいてテストする技法。" }
            ],
            content: [
                "ユースケーステストは、システムの機能がユーザーの視点からどのように振る舞うべきかを記述したユースケースに基づいてテストケースを設計するブラックボックステスト技法である。各ユースケースは、特定の機能の正常フローと代替フローの両方に対応する。",
                "ユースケース図は、ユースケーステストの設計を支援するために使用される。",
                "ユースケーステストの長所：",
                "・ ユーザーの視点からシステムをテストできる。",
                "・ ビジネスプロセスを網羅的にテストできる。",
                "・ 要件の曖昧さを特定しやすい。",
                "ユースケーステストの短所：",
                "・ ユースケースの記述に依存する。",
                "・ ユースケースが複雑すぎると、テストケースの設計も複雑になる。",
                "この技法を効果的に適用するための注意点：",
                "・ ユースケースの正常フローと代替フローの両方をテストする。",
                "・ ユースケースの事前条件と事後条件を明確にする。",
                "・ 各ステップでのシステムの挙動を詳細に定義する。"
            ]
        },
        {
            section: "3.2.8",
            title: "技法の組み合わせ",
            objectives: [
                "TA-3.2.8 （K2）異なるテスト技法を組み合わせる方法の例を挙げる。"
            ],
            keyTerms: [],
            content: [
                "テストアナリストは、最も効果的なテストカバレッジを達成するために、複数のテスト技法を組み合わせて使用することがある。",
                "例えば、同値分割法と境界値分析を組み合わせて使用する。",
                "また、デシジョンテーブルテストで識別された条件を、ユースケーステストのシナリオに組み込むこともできる。"
            ]
        },
        {
            section: "3.3",
            title: "経験ベースのテスト技法",
            objectives: [
                "TA-3.3.1 (K2) 経験ベースのテスト技法の定義と目的を説明する。"
            ],
            keyTerms: [],
            content: [
                "経験ベースのテスト技法は、テスト担当者の知識、経験、直感に基づいてテストケースを設計する。"
            ]
        },
        {
            section: "3.3.1",
            title: "エラー推測",
            objectives: [
                "TA-3.3.1 （K2）エラー推測を適用して、テスト条件とテストケースを導出する。"
            ],
            keyTerms: [
                { term: "エラー推測", definition: "ソフトウェアの経験、過去の欠陥データ、および既知の欠陥タイプに基づいて、システムで発生しそうな欠陥を推測し、それらを発見するためのテストを設計する技法。" }
            ],
            content: [
                "エラー推測は、テスト担当者の経験と知識に基づいて、システムで発生しそうな欠陥を予測し、それらを発見するためのテストケースを設計する経験ベースのテスト技法である。",
                "エラー推測の長所：",
                "・ 欠陥検出の効率が高い。",
                "・ 早期に欠陥を発見できる可能性がある。",
                "・ 特定の専門知識を活用できる。",
                "エラー推測の短所：",
                "・ テストの網羅性が保証されない。",
                "・ テスト担当者の経験と知識に依存する。",
                "・ 体系的な文書化が難しい場合がある。",
                "この技法を効果的に適用するための注意点：",
                "・ 過去のプロジェクトの欠陥データやチェックリストを活用する。",
                "・ ドメイン知識や技術的な専門知識を持つテスト担当者が行う。",
                "・ 他の体系的なテスト技法と組み合わせて使用する。"
            ]
        },
        {
            section: "3.3.2",
            title: "チェックリストベースドテスト",
            objectives: [
                "TA-3.3.2 （K2）与えられたテスト状況に対し、チェックリストベースドテストを適用してテストケースを導出する。"
            ],
            keyTerms: [
                { term: "チェックリストベースドテスト", definition: "チェックリストを使用してテストケースを設計する技法。" }
            ],
            content: [
                "チェックリストベースドテストは、事前に定義されたチェックリストに基づいてテストケースを設計する経験ベースのテスト技法である。チェックリストは、経験、過去の欠陥、または特定の業界標準に基づいて作成される。",
                "チェックリストベースドテストの長所：",
                "・ 比較的短時間でテストケースを設計できる。",
                "・ テストの網羅性をある程度保証できる。",
                "・ 経験の浅いテスト担当者でも適用しやすい。",
                "チェックリストベースドテストの短所：",
                "・ チェックリストの品質に依存する。",
                "・ 新しい欠陥タイプを見逃す可能性がある。",
                "・ チェックリストが古くなると、有効性が低下する。",
                "この技法を効果的に適用するための注意点：",
                "・ チェックリストは定期的に見直し、更新する。",
                "・ 常に新しい欠陥タイプやリスクを考慮に入れる。",
                "・ 他のテスト技法と組み合わせて使用し、カバレッジを向上させる。"
            ]
        },
        {
            section: "3.3.3",
            title: "探索的テスト",
            objectives: [
                "TA-3.3.3 （K2）探索的テストの活動を行う際に、テストアナリストにとって適切なタスクをまとめる。"
            ],
            keyTerms: [
                { term: "探索的テスト", definition: "テスト設計、テスト実行、テスト結果の分析、およびテスト学習を同時に実行するテスト技法。" }
            ],
            content: [
                "探索的テストは、テスト設計、テスト実行、学習を並行して行う経験ベースのテスト技法である。テスト担当者は、システムを探索し、その動作を理解しながら、リアルタイムでテストケースを設計・実行する。",
                "探索的テストの長所：",
                "・ 早期に重要な欠陥を発見できる可能性がある。",
                "・ 特定の専門知識や直感を活用できる。",
                "・ 新しい情報に基づいてテストを適応させることができる。",
                "探索的テストの短所：",
                "・ テストの網羅性が保証されにくい。",
                "・ テスト担当者のスキルに大きく依存する。",
                "・ テスト実行の再現が難しい場合がある。",
                "この技法を効果的に適用するための注意点：",
                "・ テストセッションをタイムボックス化する。",
                "・ テストチャーター（テストの目標）を定義する。",
                "・ 発見したことや学んだことを記録する。",
                "・ 他の体系的なテスト技法と組み合わせて使用する。"
            ]
        },
        {
            section: "3.3.4",
            title: "欠陥ベースのテスト技法",
            objectives: [
                "TA-3.3.4 （K2）欠陥ベースのテスト技法を適用して、テスト条件とテストケースを導出する。"
            ],
            keyTerms: [
                { term: "欠陥ベースのテスト技法", definition: "既知の欠陥や一般的な欠陥パターンに基づいてテストケースを設計する技法。" }
            ],
            content: [
                "欠陥ベースのテスト技法は、過去に発生した欠陥データや、一般的な欠陥パターンに関する知識を活用してテストケースを設計する経験ベースのテスト技法である。これは、特定の欠陥タイプを見つけることに焦点を当てる。",
                "欠陥ベースのテスト技法の長所：",
                "・ 既知の欠陥タイプを効率的に発見できる。",
                "・ 経験的に欠陥が多い領域に焦点を当てることができる。",
                "・ 効率的な欠陥検出に貢献する。",
                "欠陥ベースのテスト技法の短所：",
                "・ 新しい欠陥タイプを見逃す可能性がある。",
                "・ 過去のデータや専門知識に依存する。",
                "この技法を効果的に適用するための注意点：",
                "・ 欠陥データベースを定期的に分析し、パターンを識別する。",
                "・ 業界標準の欠陥分類法を使用することを検討する。",
                "・ 他のテスト技法と組み合わせて使用し、カバレッジを向上させる。"
            ]
        }
    ]
};

export default chapter3;